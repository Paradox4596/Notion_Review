1페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

아래 <1>과 <2>는 똑같은 결과가 나옴

-----------------------------------------------------------------------------------------------------------------------------------------------------

<1>

void swap(int* a, int* b) // a는 x(10)를 가르키는중
{
	int temp = *a; // temp = 10
	*a = *b; // a는 y(20)를 가르키는중
	*b = temp; // b = 10
}

int main()
{
	int x{ 10 }, y{ 20 };

	swap(&x, &y);
	std::cout << x << ", " << y << std::endl;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------

<2>

#include <iostream>

void swap(int& a, int& b) // a는 x(10)를 참조중(a값 출력하면 10,&a값 출력하면 0000009E61D7FAC4) , b는 y(20)를 참조중
{
	int temp = a; // temp = 10
	a = b; // a = 20
	b = temp; // b = 10
}

int main()
{
	int x{ 10 }, y{ 20 };

	swap(x, y);
	std::cout << x << ", " << y << std::endl;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

4페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

참조형의 제약
1)선언과 동시에 반드시 초기화
2)초기화 이후에는 다른 변수를 참조하도록 변경 불가능

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

5페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

우측 값 참조 : 상수 참조로 우측값을 초기화할 수 있으므로 조금 더 오래 살 수 있도록 만든 것
ex) const int& ref3 {10+20};
std::cout << ref3 << std::endl;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

11페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

int (*f)(int) : f는 int형 매개변수를 하나 가지고, int의 값을 반환하는 함수에 대한 포인터

선언 / 타입 식별자; / int (*funcPtr)(float);
대입 / 식별자 = 식별자; / funcPtr = MyFunction;
호출 / 식별자(...); / (*funcPtr)(1.0f); // 기본
		   / funcPtr(1.0f); // 암시적 형변환

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

12페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

아래 <1> <2> <3>은 전부 똑같음. 맨 아래가 제일 깔끔!

-----------------------------------------------------------------------------------------------------------------------------------------------------

<1>

int Myfunction(float f)
{
	return 0;
}

int main()
{
	int (*funcPtr)(float);
	funcPtr = Myfunction;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------

<2>

typedef int (*FunctionPointer)(float);

int MyFunction(float f)
{
	return 0;
}

int main()
{
	FunctionPointer funcPtr = MyFunction;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------

<3>

using FunctionPointer = int (*)(float);

int MyFunction(float f)
{
	return 0;
}

int main()
{
	FunctionPointer funcPtr = MyFunction;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

23페이지

-----------------------------------------------------------------------------------------------------------------------------------------------------

매개변수로 배열을 인자로 이용할 때 크기가 크면 도중까지만 계산이 되지만, 크기가 작을 땐 오버플로우가 발생해서 치명적일 수 있다. 따라서 배열을 매개변수로 넘겨줄 땐 크기를 꼭 같이 넘겨줘야 안전하다!

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

0620 녹화 영상

-----------------------------------------------------------------------------------------------------------------------------------------------------

int* (*(*arr[5])())();

arr
[5]
*
()
*
()
*
int

arr is
array 5
pointer to
function returning
pointer to
function returning
pointer to
integer

-----------------------------------------------------------------------------------------------------------------------------------------------------

*p.hp

p
.
hp
*

p is
member of
hp
which pointer

-----------------------------------------------------------------------------------------------------------------------------------------------------

(*p).hp

p
*
.
hp

p is
pointer to
member of
hp

-----------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>

int main()
{
	int array[2][3]
	{
		{1,2,3},
		{4,5,6}
	};

	int(*p)[3] = array;

	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			std::cout << *(*p + j) << " ";
		}
		std::cout << std::endl;
		p++;
	}

// 위와 아래는 똑같이 인쇄됨

	int* p2 = &array[0][0];

	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			std::cout << *p2++ << " ";
		}
		std::cout << std::endl;
	}
}
