k-1270

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	int value{ 0 };

	int *pointer;

	pointer = &value;

	std::cout << &value << std::endl; // 000000986431F854
	std::cout << pointer << std::endl; // 000000986431F854

	std::cout << sizeof(value) << std::endl; // 4
	std::cout << sizeof(pointer) << std::endl; // !!!!!!!!!!!주의!!!!!!!!!!! x64에서 컴파일 하면 '8' , x86에서 컴파일 하면 '4'
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1281

-----------------------------------------------------------------------------------------------------------------------------------------------------

void f(int* x)
{
	std::cout << "정수포인터" << std::endl;
}

void f(int x)
{
	std::cout << "정수" << std::endl;
}

int main()
{
	f(nullptr); // 정수포인터
  f(0); // 정수
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1287

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	int myInteger{ 1 };
	char myCharacter{ 'a' };

	void* p; // void pointer : 어떤 타입이든 가리킬 순 있으나 역참조, 연산이 불가능
	// 명시적으로 타입캐스팅은 가능

	p = &myInteger;
	p = &myCharacter;

	std::cout << *((char*)p) << std::endl; // a
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1293

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	// 컴퓨터 메모리엔 거꾸로 저장되는 Endian 기법

	unsigned int color{ 0xFF100020 };

	char* p = (char*)&color;

	std::cout << (int)*p << std::endl; // 32

	p++;

	std::cout << (int)*p << std::endl; // 0

	p++;

	std::cout << (int)*p << std::endl; // 16

	p++;

	std::cout << (int)*p << std::endl; // -1
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1297

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	int x{ 0 };

	int* p = &x;

	int** pp = &p;

	int*** ppp = &pp;

	std::cout << *p << std::endl; // 0 

	std::cout << *pp << std::endl; // 000000F25F5BF654

	std::cout << *ppp << std::endl; // 000000370D2FF9E8
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1310

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	struct Status
	{
		int HP;
		int MP;
	};

	Status myStatus{ 100, 10 };
	
	Status* p = &myStatus;

	std::cout << (*p).HP << std::endl; //100
	std::cout << p->HP << std::endl; //100
}

. : 닷 오퍼레이터 - 일반 변수의 멤버
-> : 애로우 오퍼레이터 - 포인터 변수의 멤버

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1311

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	const int value1{ 0 }, value2{ 1 };

	const int* p;
	p = &value1;
	p = &value2; // 포인터 자체는 상수가 아니므로 가리키는 값은 변경 가능

	//int* p = &value; // 오류  - 포인터 지정 자체가 안됨. 아래처럼 const 의 내용을 바꿀 수 있기 때문

	//*p = 1;
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1316

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	int x{ 1 }, y{ 2 };

	int* const pp{ &x };
	*pp = 5; // 역참조로 값 변경 가능
	
	pp = &y; // 오류 - 상수 포인터이므로 가르키는 값은 변할수 없다
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

k-1317

-----------------------------------------------------------------------------------------------------------------------------------------------------

int main()
{
	int a{ 0 }, b{ 1 };
	const int* const ppp = &a;

	ppp = &b; // 오류 - 상수 포인터이므로 대상 변경 불가능
	*ppp = 2; // 오류 - 가리키는 대상은 상수이므로 역참조로 값 수정 불가능
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
